services:
  mongo:
    image: mongo:6
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"quit(db.runCommand({ ping: 1 }).ok === 1 ? 0 : 1)\""]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 30s

  mongo-express:
    image: mongo-express:1.0.2-20
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo:27017"
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_started
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: kitcerto-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    command: ["start","--http-port=8080","--import-realm"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_PROXY: edge
      KC_LOG_LEVEL: info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
    volumes:
      - ./keycloak/realm-kitcerto.json:/opt/keycloak/data/import/realm-kitcerto.json:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    # Healthcheck removido para evitar dependência de curl na imagem
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build:
      context: ..
      dockerfile: backend/KitCerto.API/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: "Docker"
      ASPNETCORE_URLS: "http://0.0.0.0:5000"
      ConnectionStrings__Mongo: "mongodb://mongo:27017/kitcerto"
      Auth__Authority: "http://keycloak:8080/realms/kitcerto"
      Auth__Audience: "kitcerto-api"
      Cors__Origins: "http://localhost:3000;http://localhost"
    ports:
      - "5000:5000"
    restart: unless-stopped
    # Healthcheck removido em favor de readiness no orquestrador (ou checks nativos)

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_BASE_URL=/api
      - NEXT_PUBLIC_USE_MOCKS=false
      - NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8080
      - NEXT_PUBLIC_KEYCLOAK_REALM=kitcerto
      - NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=kitcerto-frontend
    depends_on:
      api:
        condition: service_started
      keycloak:
        condition: service_started
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      api:
        condition: service_started
      frontend:
        condition: service_started
    restart: unless-stopped

# (bloco necessário para volumes nomeados)
volumes:
  mongo_data:
  pg_data:
